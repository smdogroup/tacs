/*
  This file is part of TACS: The Toolkit for the Analysis of Composite
  Structures, a parallel finite-element code for structural and
  multidisciplinary design optimization.

  Copyright (C) 2014 Georgia Tech Research Corporation

  TACS is licensed under the Apache License, Version 2.0 (the
  "License"); you may not use this software except in compliance with
  the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0
*/

#ifndef TACS_GIBBS_VECTOR_H
#define TACS_GIBBS_VECTOR_H

/*
  The following class defines a Gibbs vector: A 3D vector in the
  global inertial reference frame.

  The components of this vector can be set as design variables that
  modify either initial conditions or the initial orientation of the
  bodies within a multibody system.
*/
class TACSGibbsVector : public TACSObject {
 public:
  TACSGibbsVector(const TacsScalar _x[]);
  TACSGibbsVector(const TacsScalar _x[], const int _xDV[]);
  TACSGibbsVector(TacsScalar x1, TacsScalar x2, TacsScalar x3, int n1 = -1,
                  int n2 = -1, int n3 = -1);
  ~TACSGibbsVector() {}

  // Get the coponents of the vector
  void getVector(const TacsScalar **_x);

  // Set the design variable numbers
  int getDesignVarNums(int elemIndex, int dvLen, int dvNums[]);
  int setDesignVars(int elemIndex, int dvLen, const TacsScalar dvs[]);
  int getDesignVars(int elemIndex, int dvLen, TacsScalar dvs[]);
  int getDesignVarRange(int elemIndex, int dvLen, TacsScalar lb[],
                        TacsScalar ub[]);

  // Take the derivative of the product of the adjoint variables and the vector
  void addPointAdjResProduct(TacsScalar scale, const TacsScalar psi[],
                             int dvLen, TacsScalar dfdx[]);

 private:
  TacsScalar x[3];
  int xDV[3];
};

/*
  A vector class for the multibody dynamics code.

  These vectors are global objects that exist in the global reference
  frame. The purpose of this object is to provide an easier input to
  the initial set up of dynamics problems. All input is specified in a
  global reference frame (except for body-fixed frame inertial
  properties.)

  Reference points within the body-fixed frames are generated by each
  body at the initial point for analysis.

  input:
  x:    the 3-space coordinate of the point

  Note: The design variable numbers are initialized to -1
*/
inline TACSGibbsVector::TACSGibbsVector(const TacsScalar _x[]) {
  x[0] = _x[0];
  x[1] = _x[1];
  x[2] = _x[2];
  xDV[0] = xDV[1] = xDV[2] = -1;
}

/*
  The alternate constructor

  Create the vector object using the coordinates of the point within
  the inertial reference frame and the corresponding design variable
  numbers.

  input:
  x1, x2, x3:   the 3 coordinates
  n1, n2, n3:   the design variable numbers
*/
inline TACSGibbsVector::TACSGibbsVector(TacsScalar x1, TacsScalar x2,
                                        TacsScalar x3, int n1, int n2, int n3) {
  x[0] = x1;
  x[1] = x2;
  x[2] = x3;
  xDV[0] = n1;
  xDV[1] = n2;
  xDV[2] = n3;
}

/*
  Create an point in the inertial reference frame

  input:
  x:    the coordinate of the point
  xDV:  the design variable numbers of the point
*/
inline TACSGibbsVector::TACSGibbsVector(const TacsScalar _x[],
                                        const int _xDV[]) {
  x[0] = _x[0];
  x[1] = _x[1];
  x[2] = _x[2];
  xDV[0] = _xDV[0];
  xDV[1] = _xDV[1];
  xDV[2] = _xDV[2];
}

/*
  Retrieve the coordinates of the point
*/
inline void TACSGibbsVector::getVector(const TacsScalar **_x) { *_x = x; }

/*
  Get the design variable numbers associated with this object

  input:
  dvs:    the design variable values
  numDVs: the number of design variable values in the array
*/
inline int TACSGibbsVector::getDesignVarNums(int elemIndex, int dvLen,
                                             int dvNums[]) {
  int count = 0;
  if (xDV[0] >= 0 && (dvNums && count < dvLen)) {
    dvNums[count] = xDV[0];
    count++;
  }
  if (xDV[1] >= 0 && (dvNums && count < dvLen)) {
    dvNums[count] = xDV[1];
    count++;
  }
  if (xDV[2] >= 0 && (dvNums && count < dvLen)) {
    dvNums[count] = xDV[2];
    count++;
  }
  return count;
}

/*
  Set the design variable values from the input vector into this object

  input:
  dvs:    the design variable values
  numDVs: the number of design variable values in the array
*/
inline int TACSGibbsVector::setDesignVars(int elemIndex, int dvLen,
                                          const TacsScalar *dvs) {
  int count = 0;
  if (xDV[0] >= 0) {
    x[0] = dvs[count];
    count++;
  }
  if (xDV[1] >= 0) {
    x[1] = dvs[count];
    count++;
  }
  if (xDV[2] >= 0) {
    x[2] = dvs[count];
    count++;
  }
  return count;
}

/*
  Retrieve the design variable values from the object

  input:
  numDVs:  the number of design variable values in the array

  output:
  dvs:     the design variable values retrieved from the object
*/
inline int TACSGibbsVector::getDesignVars(int elemIndex, int dvLen,
                                          TacsScalar *dvs) {
  int count = 0;
  if (xDV[0] >= 0) {
    dvs[count] = x[0];
    count++;
  }
  if (xDV[1] >= 0) {
    dvs[count] = x[1];
    count++;
  }
  if (xDV[2] >= 0) {
    dvs[count] = x[2];
    count++;
  }
  return count;
}

/*
  Retrieve the design variable range from the object
*/
inline int TACSGibbsVector::getDesignVarRange(int elemIndex, int dvLen,
                                              TacsScalar lb[],
                                              TacsScalar ub[]) {
  int count = 0;
  if (xDV[0] >= 0) {
    lb[count] = -1e30;
    ub[count] = 1e30;
    count++;
  }
  if (xDV[1] >= 0) {
    lb[count] = -1e30;
    ub[count] = 1e30;
    count++;
  }
  if (xDV[2] >= 0) {
    lb[count] = -1e30;
    ub[count] = 1e30;
    count++;
  }
  return count;
}

/*
  Add the derivative associated with the point locations to the vector.

  input:
  scale:   the sensitivity is multiplied by this scalar
  psi:     the adjoint vector
  dvLen:   the number of design variables

  input/output:
  dfdx: the array of derivatives
*/
inline void TACSGibbsVector::addPointAdjResProduct(TacsScalar scale,
                                                   const TacsScalar psi[],
                                                   int dvLen,
                                                   TacsScalar dfdx[]) {
  int count = 0;
  if (xDV[0] >= 0) {
    dfdx[count] += scale * psi[0];
    count++;
  }
  if (xDV[1] >= 0) {
    dfdx[count] += scale * psi[1];
    count++;
  }
  if (xDV[2] >= 0) {
    dfdx[count] += scale * psi[2];
    count++;
  }
}

#endif  // TACS_GIBBS_VECTOR_H
